export default async function handler(req, res) {
    if (req.method !== "POST") {
      return res.status(405).json({ message: "Method not allowed" });
    }
  
    const update = req.body;
  
    // üü° –û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è /start
    if (update.message) {
      const chatId = update.message.chat.id;
      const text = update.message.text;
      const username = update.message.from.username;
  
      console.log("üî• Chat ID:", chatId);
      console.log("üî§ Text:", text);
  
      // –ù–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–±—Ä–æ–±–∫–∞ /start=...
      if (text.startsWith("/start")) {
        const param = text.split(" ")[1]; // /start 380501234567
        const phone = param || "–Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ";
  
        // –ó–±–µ—Ä—ñ–≥–∞—î—à —É –±–∞–∑—É/Google Sheets
        // await saveUser({ chatId, phone });
  
        await sendTelegramMessage(chatId, `–í–∞—à –Ω–æ–º–µ—Ä –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ: ${phone}`);
      }
    }
  
    // üü° –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ—ó inline –∫–Ω–æ–ø–∫–∏
    if (update.callback_query) {
      const chatId = update.callback_query.from.id;
      const data = update.callback_query.data;
  
      console.log("‚öôÔ∏è Callback:", data);
  
      await sendTelegramMessage(chatId, `–í–∏ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏: ${data}`);
    }
  
    res.status(200).end();
  }
  
  // –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
  async function sendTelegramMessage(chatId, text) {
    const BOT_TOKEN = process.env.REACT_APP_BOT_TOKEN;
  
    await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text,
      }),
    });
  }