const crypto = require('crypto');
const fetch = require('node-fetch'); // –Ø–∫—â–æ –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî npm i node-fetch

module.exports = async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { hash, ...rest } = req.body;

  // üîê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–µ—à—É Telegram
  const checkString = Object.keys(rest)
    .sort()
    .map(key => `${key}=${rest[key]}`)
    .join('\n');

  const secret = crypto.createHash('sha256').update(process.env.REACT_APP_BOT_TOKEN).digest();
  const hmac = crypto.createHmac('sha256', secret).update(checkString).digest('hex');

  if (hmac !== hash) {
    return res.status(403).json({ status: 'invalid', error: 'Bad Telegram hash' });
  }

  const userId = String(rest.id);

  // ‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ userId
  if (!userId) {
    console.error('‚ùå userId –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');
    return res.status(400).json({ status: 'error', message: 'userId is missing' });
  }

  try {
    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤ Google Sheets
    const checkRes = await fetch(`${process.env.REACT_APP_GOOGLE_SCRIPT_URL}?id=${userId}`);
    const checkData = await checkRes.json();

    if (checkData.exists === true) {
      return res.json({ status: 'known', user: req.body });
    }

    // üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const saveRes = await fetch(process.env.REACT_APP_GOOGLE_SCRIPT_URL, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(req.body),
    });

    const saveData = await saveRes.json();

    if (saveData.success === true) {
      // ‚úâÔ∏è –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
      console.log('üß™ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ id:', userId);

      const tgRes = await fetch(`https://api.telegram.org/bot${process.env.REACT_APP_BOT_TOKEN}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: userId,
          text: `üëã –ü—Ä–∏–≤—ñ—Ç, ${rest.first_name}! –í–∏ —É—Å–ø—ñ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑—É–≤–∞–ª–∏—Å—è –Ω–∞ —Å–∞–π—Ç—ñ.`,
        }),
      });

      const tgData = await tgRes.json();
      console.log('üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å Telegram API:', tgData);

      if (!tgData.ok) {
        if (tgData.error_code === 403) {
          console.error('‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –Ω–∞–ø–∏—Å–∞–≤ –±–æ—Ç—É. –ù–µ–º–æ–∂–ª–∏–≤–æ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.');
        } else {
          console.error('‚ö†Ô∏è –Ü–Ω—à–∞ –ø–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', tgData.description);
        }
      }

      return res.json({
        status: 'saved',
        user: req.body,
        tgData,
        warning: !tgData.ok ? 'sendMessage_failed' : undefined,
      });
    }

    return res.status(500).json({ status: 'error', message: '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });

  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Google Script –∞–±–æ Telegram:', err);
    return res.status(500).json({ status: 'error', message: '–°–µ—Ä–≤–µ—Ä–Ω–∞ –ø–æ–º–∏–ª–∫–∞' });
  }
};