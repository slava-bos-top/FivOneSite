import React, { useState } from "react";

const TelegramLogin = () => {
  const [phone, setPhone] = useState("");
  const [checking, setChecking] = useState(false);

  // –§–æ—Ä–º—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Telegram-–±–æ—Ç–∞ —ñ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  const sanitizedPhone = phone.replace(/\D/g, ""); // –í–∏–ª—É—á–∞—î–º–æ –≤—Å–µ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä
  const telegramBotLink = `https://t.me/fivone_bot?start=confirm_${sanitizedPhone}`;

  // URL –¥–æ Google Apps Script
  const GAS_URL = "https://script.google.com/macros/s/AKfycbzolGVu6tTFmKCabwpk-gpqoKY9NxwqyYzt4uVr5AOLtI6474Y_oOe5x8NuJcvV1jka/exec";

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∏–π –Ω–æ–º–µ—Ä —É –±–∞–∑—ñ (confirmed == 1)
  const checkIfConfirmed = async () => {
    try {
      const res = await fetch(`${GAS_URL}?phone=${sanitizedPhone}`);
      if (!res.ok) throw new Error("–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ");
      const data = await res.json();
      return data.confirmed === "1" || data.confirmed === 1;
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", error);
      return false;
    }
  };

  // –°–∫–∏–¥–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É confirmed –≤ 0 (–ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤—Ö–æ–¥—É)
  const resetConfirmed = async () => {
    try {
      await fetch(GAS_URL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          phone: sanitizedPhone,
          resetConfirmed: true,
        }),
      });
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:", error);
    }
  };

  // –û–ø–∏—Ç—É–≤–∞–Ω–Ω—è —Å–µ—Ä–≤–µ—Ä–∞ –∫–æ–∂–Ω—ñ 5 —Å–µ–∫—É–Ω–¥, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—å –ø—Ä–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
  const startConfirmationPolling = () => {
    let attempts = 0;
    const maxAttempts = 60; // 5 —Ö–≤–∏–ª–∏–Ω (60 —Ä–∞–∑—ñ–≤ –ø–æ 5 —Å–µ–∫—É–Ω–¥)

    const intervalId = setInterval(async () => {
      const confirmed = await checkIfConfirmed();

      if (confirmed) {
        clearInterval(intervalId);
        setChecking(false);
        alert("‚úÖ –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–∞!");
        await resetConfirmed();
        return;
      }

      attempts++;
      if (attempts >= maxAttempts) {
        clearInterval(intervalId);
        setChecking(false);
        alert("‚è≥ –ß–∞—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–π—à–æ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      }
    }, 5000);
  };

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–Ω–æ–ø–∫–∏ "–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"
  const handleLogin = async (e) => {
    e.preventDefault();
    if (!sanitizedPhone) {
      alert("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É");
      return;
    }

    try {
      const res = await fetch(`${GAS_URL}?phone=${sanitizedPhone}`);
      if (!res.ok) throw new Error("–ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ");
      const data = await res.json();

      if (data.confirmed === "0" || data.confirmed === 0) {
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è-–Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É Telegram
        const response = await fetch("/api/send-message", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            chat_id: data.userId,
            text: `üëã –ü—Ä–∏–≤—ñ—Ç, ${data.name} ${data.surname}! –ë—É–¥—å –ª–∞—Å–∫–∞, –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –≤—Ö—ñ–¥ —É Telegram-–±–æ—Ç—ñ.`,
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏",
                    callback_data: "confirmSignIn",
                  },
                ],
              ],
            },
          }),
        });

        const result = await response.json();

        if (result.success) {
          alert("‚ö†Ô∏è –í–∞–º –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —É Telegram.");
        } else {
          alert("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram.");
        }
      } else if (data.confirmed === "1" || data.confirmed === 1) {
        alert("‚úÖ –í–∞—à –≤—Ö—ñ–¥ –≤–∂–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ.");
        return;
      } else if (data.confirmed === false) {
        // –Ø–∫—â–æ –Ω–æ–º–µ—Ä—É –Ω–µ–º–∞—î —É –±–∞–∑—ñ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –±–æ—Ç (–ø–µ—Ä—à–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è)
        alert("‚ö†Ô∏è –ù–æ–º–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–π–¥—ñ—Ç—å —É Telegram –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.");
      }

      setChecking(true);
      window.open(telegramBotLink, "_blank");
      startConfirmationPolling();

    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ª–æ–≥—ñ–Ω—ñ:", error);
      alert("‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.");
    }
  };

  return (
    <div style={{ width: "100%", alignItems: "center", paddingTop: 100, display: "flex", justifyContent: "center" }}>
      <div style={{ display: "flex", flexDirection: "column", gap: 12, maxWidth: 300 }}>
        <input
          type="tel"
          placeholder="+380..."
          value={phone}
          onChange={(e) => setPhone(e.target.value)}
          style={{ padding: 8, fontSize: 16 }}
        />

        <button
          onClick={handleLogin}
          disabled={checking}
          style={{
            textAlign: "center",
            background: "#0088cc",
            color: "#fff",
            padding: 10,
            borderRadius: 6,
            border: "none",
            cursor: checking ? "wait" : "pointer",
          }}
        >
          {checking ? "‚è≥ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è..." : "–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"}
        </button>
      </div>
    </div>
  );
};

export default TelegramLogin;