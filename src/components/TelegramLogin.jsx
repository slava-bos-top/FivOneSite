import { useEffect, useState, useRef } from 'react';

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è Telegram-–≤–∏–¥–∂–µ—Ç–æ–º
window.onTelegramAuth = async (userData) => {
  console.log('‚úÖ Telegram –ø–æ–≤–µ—Ä–Ω—É–≤ –¥–∞–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userData);

  try {
    const res = await fetch('/api/verify-and-check', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userData),
    });

    const result = await res.json();
    console.log('üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ verify-and-check:', result);

    if (result.status === 'known') {
      alert(`‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–æ —è–∫ ${userData.first_name}`);
    } else if (result.status === 'unknown') {
      window.location.href = result.startLink;
    }
  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó:', err);
  }
};

const TelegramLogin = () => {
  const [status, setStatus] = useState('pending');
  const containerRef = useRef(null);

  useEffect(() => {
    const botUsername = process.env.REACT_APP_BOT_USERNAME;
    console.log('üîß Bot username –∑ env:', botUsername);

    if (!botUsername) {
      console.error('‚ùå Bot username –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env');
      return;
    }

    // –î–æ–¥–∞—î–º–æ Telegram —Å–∫—Ä–∏–ø—Ç —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —Ç–æ–≥–æ, —è–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–æ—á–Ω–æ —î
    if (containerRef.current) {
      const script = document.createElement('script');
      script.src = 'https://telegram.org/js/telegram-widget.js?22';
      script.setAttribute('data-telegram-login', botUsername);
      script.setAttribute('data-size', 'large');
      script.setAttribute('data-userpic', 'false');
      script.setAttribute('data-request-access', 'write');
      script.setAttribute('data-onauth', 'onTelegramAuth(user)');
      script.async = true;

      containerRef.current.innerHTML = ''; // –æ—á–∏—â–∞—î–º–æ —Å—Ç–∞—Ä–∏–π —Å–∫—Ä–∏–ø—Ç (—è–∫—â–æ –±—É–≤)
      containerRef.current.appendChild(script);

      setStatus('waiting');
    } else {
      console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —â–µ –Ω–µ –≥–æ—Ç–æ–≤–∏–π (ref null)');
    }
  }, []);

  return (
    <div style={{ textAlign: 'center', marginTop: '2rem' }}>
      <h1 style={{ marginBottom: '20px' }}>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —á–µ—Ä–µ–∑ Telegram</h1>
      <div ref={containerRef} id="telegram-button"></div>
    </div>
  );
};

export default TelegramLogin;