import React, { useState } from "react";

const TelegramLogin = () => {
  const [phone, setPhone] = useState("");
  const [checking, setChecking] = useState(false);

  const cleanedPhone = phone.replace("+", "");
  const telegramBotLink = `https://t.me/fivone_bot?start=confirm_${cleanedPhone}`;

  const checkIfConfirmed = async () => {
    const res = await fetch(`https://script.google.com/macros/s/AKfycbx3pPIYYnATHzeM95xJKVHVXqbvuOFx3YqyGxJ95mhxwKDfyGM3VM4iQsm8KeaoZKV9/exec?phone=${cleanedPhone}`);
    const data = await res.json();
    return data.confirmed === "1" ? data : null;
  };

  const resetConfirmedFlag = async () => {
    await fetch("https://script.google.com/macros/s/AKfycbx3pPIYYnATHzeM95xJKVHVXqbvuOFx3YqyGxJ95mhxwKDfyGM3VM4iQsm8KeaoZKV9/exec", {
      method: "POST",
      body: JSON.stringify({ phone: cleanedPhone }),
      headers: { "Content-Type": "application/json" },
    });
  };

  const startPolling = () => {
    let attempts = 0;
    const maxAttempts = 12;

    const interval = setInterval(async () => {
      const userData = await checkIfConfirmed();

      if (userData) {
        clearInterval(interval);
        await resetConfirmedFlag();
        setChecking(false);
        alert(`‚úÖ –í—Ö—ñ–¥ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ. –í—ñ—Ç–∞—î–º–æ, ${userData.name}!`);
      } else if (++attempts >= maxAttempts) {
        clearInterval(interval);
        setChecking(false);
        alert("‚è≥ –ß–∞—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–π—à–æ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      }
    }, 5000);
  };

  const handleLogin = async (e) => {
    e.preventDefault();
    if (!phone) {
      alert("üì± –í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É");
      return;
    }

    const res = await fetch(`https://script.google.com/macros/s/AKfycbx3pPIYYnATHzeM95xJKVHVXqbvuOFx3YqyGxJ95mhxwKDfyGM3VM4iQsm8KeaoZKV9/exec?phone=${cleanedPhone}`);
    const data = await res.json();

    if (data.confirmed === "0") {
      // üîπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —ñ—Å–Ω—É—î, –∞–ª–µ —â–µ –Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏–≤ –≤—Ö—ñ–¥
      const response = await fetch("/api/send-message", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: data.userId,
          text: `üëã –í—ñ—Ç–∞—î–º–æ, ${data.name} ${data.surname}! –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ, —â–æ–± –ø—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –≤—Ö—ñ–¥.`,
          reply_markup: {
            inline_keyboard: [
              [{ text: "‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data: "comfirmsignIn" }],
            ],
          },
        }),
      });

      const result = await response.json();
      if (result.success) {
        alert("üì® –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ —É Telegram");
      } else {
        alert("‚ö†Ô∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏.");
      }

      setChecking(true);
      startPolling();
    } else {
      // üîπ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π ‚Üí –≤–µ–¥–µ–º–æ –≤ Telegram
      setChecking(true);
      window.open(telegramBotLink, "_blank");
      startPolling();
    }
  };

  return (
    <div style={{ width: "100%", alignItems: "center", paddingTop: "100px", display: "flex", justifyContent: "center" }}>
      <div style={{ display: "flex", flexDirection: "column", gap: "12px", maxWidth: "300px" }}>
        <input
          type="tel"
          placeholder="+380..."
          value={phone}
          onChange={(e) => setPhone(e.target.value)}
          style={{ padding: "8px", fontSize: "16px" }}
        />

        <button
          onClick={handleLogin}
          disabled={checking}
          style={{
            textAlign: "center",
            background: "#0088cc",
            color: "#fff",
            padding: "10px",
            borderRadius: "6px",
            border: "none",
            cursor: "pointer",
          }}
        >
          {checking ? "‚è≥ –û—á—ñ–∫—É—î–º–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è..." : "–£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Telegram"}
        </button>
      </div>
    </div>
  );
};

export default TelegramLogin;